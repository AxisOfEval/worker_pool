<module name="wpool_process">
<type>
  <name>from</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-from">from()</marker> = {pid(), reference()}</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#state{name = undefined | atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>mod = undefined | atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>state = undefined | term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>options = undefined<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| [{time_checker | queue_manager, atom()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="wpool#type-option">wpool:option()</seealso>],<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>born = <seealso marker="erlang#type-timestamp">erlang:timestamp()</seealso>}</typehead></typedecl>
</type>
<spec>
  <name>age</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>age(Process :: <seealso marker="wpool#type-name">wpool:name()</seealso> | pid()) -&gt; integer() &gt;= 0</head></clause>
  </contract>
  <anno>Process</anno>
</spec>
<spec>
  <name>call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>call(Process :: <seealso marker="wpool#type-name">wpool:name()</seealso> | pid(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Call :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: timeout()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>Call</anno>
  <anno>Process</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cast(Process :: <seealso marker="wpool#type-name">wpool:name()</seealso> | pid(), Cast :: term()) -&gt; ok</head></clause>
  </contract>
  <anno>Cast</anno>
  <anno>Process</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: string(), State :: <seealso marker="#type-state">state()</seealso>, Extra :: any()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>} | {error, term()}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(Call :: term(), From :: <seealso marker="#type-from">from()</seealso>, State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, term(), <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Call</anno>
  <anno>From</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(Cast :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Cast</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Info :: any(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>} | {stop, term(), <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Info</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: {atom(), atom(), term(), [<seealso marker="wpool#type-option">wpool:option()</seealso>]}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>start_link(Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Module :: module(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>InitArgs :: term(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Options :: [<seealso marker="wpool#type-option">wpool:option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ignore |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {already_started, pid()} | term()}</head></clause>
  </contract>
  <anno>InitArgs</anno>
  <anno>Module</anno>
  <anno>Name</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: atom(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; term()</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<timestamp>Generated by EDoc, Sep 29 2014, 10:26:04.</timestamp>
</module>