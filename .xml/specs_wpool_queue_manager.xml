<module name="wpool_queue_manager">
<type>
  <name>call_request</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-call_request">call_request()</marker> = {available_worker, infinity | integer() &gt;= 1}<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| worker_counts</typehead></typedecl>
</type>
<type>
  <name>from</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-from">from()</marker> = {pid(), reference()}</typehead></typedecl>
</type>
<type>
  <name>pool_prop</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-pool_prop">pool_prop()</marker> = {pool, <seealso marker="wpool#type-name">wpool:name()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>pool_props</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-pool_props">pool_props()</marker> = [<seealso marker="#type-pool_prop">pool_prop()</seealso> | <seealso marker="#type-qm_prop">qm_prop()</seealso>]</typehead></typedecl>
</type>
<type>
  <name>qm_prop</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-qm_prop">qm_prop()</marker> = {queue_manager, <seealso marker="#type-queue_mgr">queue_mgr()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>queue_mgr</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-queue_mgr">queue_mgr()</marker> = atom()</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#state{wpool = undefined | <seealso marker="wpool#type-name">wpool:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>clients = undefined<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| <seealso marker="queue#type-queue">queue:queue</seealso>({cast | {pid(), term()}, term()}),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>workers = undefined | <seealso marker="gb_sets#type-set">gb_sets:set</seealso>(atom()),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>born = <seealso marker="erlang#type-timestamp">erlang:timestamp()</seealso>}</typehead></typedecl>
</type>
<type>
  <name>worker_event</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-worker_event">worker_event()</marker> = new_worker<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| worker_dead<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| worker_busy<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>| worker_ready</typehead></typedecl>
</type>
<spec>
  <name>available_worker</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>available_worker(QueueManager :: <seealso marker="#type-queue_mgr">queue_mgr()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: timeout()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>noproc | timeout | atom()</head></clause>
  </contract>
  <anno>QueueManager</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>cast_to_available_worker</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cast_to_available_worker(QueueManager :: <seealso marker="#type-queue_mgr">queue_mgr()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Cast :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Cast</anno>
  <anno>QueueManager</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: string(), State :: <seealso marker="#type-state">state()</seealso>, Extra :: any()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(X1 :: <seealso marker="#type-call_request">call_request()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Client :: <seealso marker="#type-from">from()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, {ok, atom()}, <seealso marker="#type-state">state()</seealso>} | {noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Client</anno>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(X1 :: {<seealso marker="#type-worker_event">worker_event()</seealso>, atom()}, State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>State</anno>
  <anno>X1</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Info :: any(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; {noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Info</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(WPool :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>WPool</anno>
</spec>
<spec>
  <name>new_worker</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>new_worker(QueueManager :: <seealso marker="#type-queue_mgr">queue_mgr()</seealso>, Worker :: atom()) -&gt; ok</head></clause>
  </contract>
  <anno>QueueManager</anno>
  <anno>Worker</anno>
</spec>
<spec>
  <name>pools</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>pools() -&gt; [<seealso marker="#type-pool_props">pool_props()</seealso>]</head></clause>
  </contract>
</spec>
<spec>
  <name>proc_info</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>proc_info(Pool_Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; <seealso marker="proplists#type-proplist">proplists:proplist()</seealso></head></clause>
  </contract>
  <anno>Pool_Name</anno>
</spec>
<spec>
  <name>proc_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>proc_info(Pool_Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Info_Type :: atom() | [atom()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="proplists#type-proplist">proplists:proplist()</seealso></head></clause>
  </contract>
  <anno>Info_Type</anno>
  <anno>Pool_Name</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_link(WPool :: <seealso marker="wpool#type-name">wpool:name()</seealso>, Name :: <seealso marker="#type-queue_mgr">queue_mgr()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {already_started, pid()} | term()}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>WPool</anno>
</spec>
<spec>
  <name>stats</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stats(Pool_Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="proplists#type-proplist">proplists:proplist()</seealso> |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {invalid_pool, <seealso marker="wpool#type-name">wpool:name()</seealso>}}</head></clause>
  </contract>
  <anno>Pool_Name</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: atom(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>trace</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>trace(Pool_Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Pool_Name</anno>
</spec>
<spec>
  <name>trace</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>trace(Pool_Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>X2 :: boolean(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Timeout :: integer() &gt;= 1) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok | {error, {invalid_pool, <seealso marker="wpool#type-name">wpool:name()</seealso>}}</head></clause>
  </contract>
  <anno>Pool_Name</anno>
  <anno>Timeout</anno>
  <anno>X2</anno>
</spec>
<spec>
  <name>worker_busy</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>worker_busy(QueueManager :: <seealso marker="#type-queue_mgr">queue_mgr()</seealso>, Worker :: atom()) -&gt; ok</head></clause>
  </contract>
  <anno>QueueManager</anno>
  <anno>Worker</anno>
</spec>
<spec>
  <name>worker_dead</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>worker_dead(QueueManager :: <seealso marker="#type-queue_mgr">queue_mgr()</seealso>, Worker :: atom()) -&gt; ok</head></clause>
  </contract>
  <anno>QueueManager</anno>
  <anno>Worker</anno>
</spec>
<spec>
  <name>worker_ready</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>worker_ready(QueueManager :: <seealso marker="#type-queue_mgr">queue_mgr()</seealso>, Worker :: atom()) -&gt; ok</head></clause>
  </contract>
  <anno>QueueManager</anno>
  <anno>Worker</anno>
</spec>
<timestamp>Generated by EDoc, Sep 29 2014, 10:26:04.</timestamp>
</module>