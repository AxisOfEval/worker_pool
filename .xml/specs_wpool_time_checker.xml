<module name="wpool_time_checker">
<type>
  <name>from</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-from">from()</marker> = {pid(), reference()}</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = <br/><nbsp/><nbsp/><nbsp/><nbsp/>#state{wpool = undefined | <seealso marker="wpool#type-name">wpool:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>handler = undefined | {atom(), atom()}}</typehead></typedecl>
</type>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: string(), State :: <seealso marker="#type-state">state()</seealso>, Extra :: any()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(Call :: term(), From :: <seealso marker="#type-from">from()</seealso>, State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply, ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Call</anno>
  <anno>From</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(Cast :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Cast</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Info :: any(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; {noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Info</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: {<seealso marker="wpool#type-name">wpool:name()</seealso>, {atom(), atom()}}) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>start_link(WPool :: <seealso marker="wpool#type-name">wpool:name()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Name :: atom(),<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>Handler :: {atom(), atom()}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {already_started, pid()} | term()}</head></clause>
  </contract>
  <anno>Handler</anno>
  <anno>Name</anno>
  <anno>WPool</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: atom(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<timestamp>Generated by EDoc, Sep 24 2014, 08:08:27.</timestamp>
</module>