<module name="wpool_worker">
<type>
  <name>from</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-from">from()</marker> = {pid(), reference()}</typehead></typedecl>
</type>
<type>
  <name>state</name>
  <n_vars>0</n_vars>
  <typedecl>
      <typehead><marker id="type-state">state()</marker> = #state{}</typehead></typedecl>
</type>
<spec>
  <name>call</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>call(S :: <seealso marker="wpool#type-name">wpool:name()</seealso>, M :: module(), F :: atom(), A :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>term()</head></clause>
  </contract>
  <anno>A</anno>
  <anno>F</anno>
  <anno>M</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>cast</name>
  <arity>4</arity>
  <contract>
    <clause>
      <head>cast(S :: <seealso marker="wpool#type-name">wpool:name()</seealso>, M :: module(), F :: atom(), A :: [term()]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>A</anno>
  <anno>F</anno>
  <anno>M</anno>
  <anno>S</anno>
</spec>
<spec>
  <name>code_change</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>code_change(OldVsn :: string(), State :: <seealso marker="#type-state">state()</seealso>, Extra :: any()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, {}}</head></clause>
  </contract>
  <anno>Extra</anno>
  <anno>OldVsn</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_call</name>
  <arity>3</arity>
  <contract>
    <clause>
      <head>handle_call(Call :: term(), From :: <seealso marker="#type-from">from()</seealso>, State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{reply,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, term()} | {error, term()},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><seealso marker="#type-state">state()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>hibernate}</head></clause>
  </contract>
  <anno>Call</anno>
  <anno>From</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_cast</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_cast(Cast :: term(), State :: <seealso marker="#type-state">state()</seealso>) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{noreply, <seealso marker="#type-state">state()</seealso>, hibernate}</head></clause>
  </contract>
  <anno>Cast</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>handle_info</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>handle_info(Info :: any(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; {noreply, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>Info</anno>
  <anno>State</anno>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: undefined) -&gt; {ok, <seealso marker="#type-state">state()</seealso>}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>terminate</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>terminate(Reason :: atom(), State :: <seealso marker="#type-state">state()</seealso>) -&gt; ok</head></clause>
  </contract>
  <anno>Reason</anno>
  <anno>State</anno>
</spec>
<timestamp>Generated by EDoc, Sep 29 2014, 10:26:04.</timestamp>
</module>