<module name="wpool_pool">
<spec>
  <name>available_worker</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>available_worker(Sup :: <seealso marker="wpool#type-name">wpool:name()</seealso>, Timeout :: timeout()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>atom()</head></clause>
  </contract>
  <anno>Sup</anno>
  <anno>Timeout</anno>
</spec>
<spec>
  <name>best_worker</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>best_worker(Sup :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Sup</anno>
</spec>
<spec>
  <name>cast_to_available_worker</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>cast_to_available_worker(Sup :: <seealso marker="wpool#type-name">wpool:name()</seealso>, Cast :: term()) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>ok</head></clause>
  </contract>
  <anno>Cast</anno>
  <anno>Sup</anno>
</spec>
<spec>
  <name>create_table</name>
  <arity>0</arity>
  <contract>
    <clause>
      <head>create_table() -&gt; ok</head></clause>
  </contract>
</spec>
<spec>
  <name>init</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>init(X1 :: {<seealso marker="wpool#type-name">wpool:name()</seealso>, [<seealso marker="wpool#type-option">wpool:option()</seealso>]}) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{{<seealso marker="supervisor#type-strategy">supervisor:strategy()</seealso>,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0,<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>integer() &gt;= 0},<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>[<seealso marker="supervisor#type-child_spec">supervisor:child_spec()</seealso>]}}</head></clause>
  </contract>
  <anno>X1</anno>
</spec>
<spec>
  <name>next_worker</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>next_worker(Sup :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Sup</anno>
</spec>
<spec>
  <name>random_worker</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>random_worker(Sup :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; atom()</head></clause>
  </contract>
  <anno>Sup</anno>
</spec>
<spec>
  <name>start_link</name>
  <arity>2</arity>
  <contract>
    <clause>
      <head>start_link(Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>, Options :: [<seealso marker="wpool#type-option">wpool:option()</seealso>]) -&gt;<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{ok, pid()} |<br/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/><nbsp/>{error, {already_started, pid()} | term()}</head></clause>
  </contract>
  <anno>Name</anno>
  <anno>Options</anno>
</spec>
<spec>
  <name>stats</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>stats(Sup :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; <seealso marker="wpool#type-stats">wpool:stats()</seealso></head></clause>
  </contract>
  <anno>Sup</anno>
</spec>
<spec>
  <name>worker_names</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>worker_names(Pool_Name :: <seealso marker="wpool#type-name">wpool:name()</seealso>) -&gt; [atom()]</head></clause>
  </contract>
  <anno>Pool_Name</anno>
</spec>
<spec>
  <name>wpool_size</name>
  <arity>1</arity>
  <contract>
    <clause>
      <head>wpool_size(Name :: atom()) -&gt; integer() &gt;= 0 | undefined</head></clause>
  </contract>
  <anno>Name</anno>
</spec>
<timestamp>Generated by EDoc, Sep 24 2014, 09:11:15.</timestamp>
</module>